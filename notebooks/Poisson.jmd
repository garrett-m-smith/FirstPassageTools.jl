---
author: Garrett Smith
title: An example of a first-passage time distribution for an absorbing Poisson process
date: 25.04.2022

---

```julia echo=false
using LinearAlgebra
```

# An absorbing Poisson process

A Poisson processes can be thought of as a stochastic process that increments a counter
variable (taking integer values) at random times. The increments are assumed to be
exponentially distributed. The master equation, which describes the change in probability of
being in a state $n$ at time $t$, is:

```math
\dot{p}_n(t) = q(p_{n-t} - p_n)
```
where ``q`` is the transition rate (in jumps per unit time) for changing state.

For this example, we will assume that $n$ ranges between 0 and 10. We are interested in the
probability distribution of first-passage times to reach $n = 10$ when starting at $n = 0$,
that is, how long does it take this system to reach its maximum counter value? We assume
that state $n = 10$ is an *absorbing state* from which the system cannot escape once it
reaches it. The remaining states are *transient states*, which the system is free to enter
or leave.

We assume that $\dot{p}_0 = -qp_0$ and that $\dot{p}_{10} = qp_9$, which creates a system of
coupled differential equations. To solve these, we define the initial probability
distribution over states to be 

```julia
p0 = zeros(9)
p0[1] = 1.0
```
We only define the initial conditions for the *transient states*, the states that are not
absorbing, $p_n, n\in [1, \dots, 9]$.

# Solving the first-passage time problem

As shown in, e.g., van Kampen (2007, *Stochastic processes in physics and chemistry*, Ch.
12), the solution for the probability distribution of the time to reach state $n = 10$ given
that the system started at $n = 0$ is

```math
p(t) = \mathbf{A}\exp\left(\mathbf{T}t\right)\mathbf{p}(0)
```
where $\mathbf{p}(0)$ is a column vector of initial probability distribution over states defined above,
$\mathbf{T}$ is the matrix of transition rates between transient states, and $\mathbf{A}$ is
the matrix of transition rates from the transient states into the absorbing state:

```julia, echo=false
T = zeros(9, 9)
T[diagind(T)] .= -1.0
T[diagind(T, -1)] .= 1.0
T
```

```julia, echo=false
A = zeros(1, 9)
A[end] = 1.0
A
```
The non-zero entries are set to one for now, but they can simply be rescaled by $q$, which
we will do below.

# Creating and fitting the $q$ parameter of the first-passage time distribution

Say we have a data set $y_i$ of $n_{\text{data}}$ data points that we assume come are
generated by this absorbing Poisson process with an unknown transition rate parameter $q$.
How can we fit $q$ to the data?

We start by loading the packages we need. We'll using `Turing.jl` to implement Bayesian
parameter fitting of $q$. `FirstPassageTools.jl` directly implements the matrix exponential
function for the first-passage time distribution in the equation above, and currently, only
the `Zygote.jl` package implements the necessary automatic differentiation procedures need
to use the NUTS() sampler in Turing. 

```julia
using Distributions
using Turing
using Zygote
Turing.setadbackend(:zygote)
using Plots, StatsPlots
using Pkg
Pkg.activate("../../FirstPassageTools.jl/")
using FirstPassageTools
```

## Generating data

We will assume that $q = 7.5$ transitions per second is the true value that generates the
data. We can now set up the first-passage time distribution:

```julia; cache=true; echo=false;
true_q = 7.5
fp = fpdistribution(true_q*T, true_q*A, p0)
n_data = 250
data = rand(fp, n_data)
```

```julia; fig_cap="First-passage times, generated with q = 7.5"
histogram(data, xlabel="First-passage times", normalize=:true, label="Random data")
plot!(fp, label="True density")
```

# Fitting the data

We will assume the following model (priors and likelihood):
```julia
@model function mod(y, T=T, A=A, p0=p0)
    # Set prior on q
    q ~ truncated(Normal(5, 1), 0.001, Inf)
    # Likelihood
    y ~ filldist(fpdistribution(q*T, q*A, p0), length(y))
end
```

We assume a truncated normal distribution (SD = 5) for $q$. The data are distributed
according to the first-passage time distribution defined above, but rescaled by $q$.

We can now sample from the posterior distribution of $q$:

```julia; cache=true
posterior = sample(mod(data), NUTS(500, 0.65), MCMCThreads(), 1000, 4)
```

Let's have a look at the trace plot and the posterior density of $q$:

```julia; echo=false; out_width="75%"
plt = plot(posterior)
vline!(plt[2], [true_q])
```

It looks like we recovered the true value of $q$ pretty well. 

